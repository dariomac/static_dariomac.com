{"version":3,"sources":["components/InventoryLoader/InventoryLoader.module.js","components/InventoryLoader/InventoryLoader.sagas.js","components/InventoryLoader/InventoryLoader.topmost.jsx","components/InventoryLoader/index.js","components/OmniSearchBox/OmniSearchBox.module.js","components/OmniSearchBox/OmniSearchBox.sagas.js","components/OmniSearchBox/OmniSearchBox.topmost.jsx","components/OmniSearchBox/index.js","App.js","components/Router/router.module.js","rootReducer.js","components/Router/router.sagas.js","components/Router/index.js","rootSaga.js","create-store.js","index.js"],"names":["types","initialState","inventory","loaded","creators","fetchInventoryAction","url","type","payload","commitInventoryAction","fetchInventory","action","call","fetch","response","ok","data","put","sagas","takeLatest","connect","state","dispatch","reducers","combineReducers","SEARCH","COMMIT_SEARCH","CLEAR","COMMIT_CLEAR","searchAction","needle","haystack","commitSearch","findings","search","expr","jsonata","res","evaluate","err","console","log","defaultNeedle","rows","isNaN","useState","setNeedle","length","className","value","onValueChange","highlight","code","languages","js","padding","style","fontFamily","fontSize","wordWrap","whiteSpace","border","height","filtered","theme","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","articles","omniSearchBox","qs","location","query","q","hideRoot","shouldExpandNode","keyName","level","routesMap","connectRoutes","initialDispatch","querySerializer","queryString","routeReducer","reducer","routeMiddleware","middleware","enhancer","inventoryFetcher","omniSearchReducer","pages","NOT_FOUND","updateRouterSaga","actions","updateRouter","history","push","encodeURIComponent","Object","keys","root","fork","InventoryLoaderSagas","OmniSeachBoxSagas","store","sagaMiddleware","createSagaMiddleware","middlewares","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","run","rootSaga","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.769be6bc.chunk.js","sourcesContent":["export const types = {\n  FETCH_INVENTORY: 'FETCH_INVENTORY',\n  COMMIT_INVENTORY: 'COMMIT_INVENTORY'\n};\n\nconst initialState = {\n  inventory: null,\n  loaded: false\n};\n\nexport const commitInventoryFetcherReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.COMMIT_INVENTORY:\n      return action.payload\n    default:\n      return state;\n  }\n};\n\nexport const creators = {\n  fetchInventoryAction: (url) => {\n    return {\n      type: types.FETCH_INVENTORY,\n      payload: { \n        url\n      }\n    };\n  },\n  commitInventoryAction: (payload) => {\n    return {\n      type: types.COMMIT_INVENTORY,\n      payload: payload\n    };\n  }\n};\n","import { takeLatest, put, call } from 'redux-saga/effects';\nimport { creators, types } from './InventoryLoader.module';\n  \nfunction * fetchInventory (action) {\n  // fetch from server\n  const response = yield call(fetch, action.payload.url); // we should remove last ',' before closing the array\n  if (response.ok) {\n    const data = yield call([response, 'json']);\n    yield put(creators.commitInventoryAction(data));\n  }\n}\n\nexport const sagas = { \n  fetch: function * () {\n    yield takeLatest(types.FETCH_INVENTORY, fetchInventory);\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { creators } from './InventoryLoader.module';\n\nconst InventoryLoader = ({ url, fetchInventory }) => {\n  return (\n    <>\n      { fetchInventory(url) }\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchInventory: (url) => {\n      dispatch(creators.fetchInventoryAction(url));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InventoryLoader);\n","import { combineReducers } from 'redux';\nimport { \n  commitInventoryFetcherReducer\n} from './InventoryLoader.module';\n\nexport { sagas } from './InventoryLoader.sagas';\n\nexport { types as actions } from './InventoryLoader.module';\nexport { creators } from './InventoryLoader.module';\n\nexport const reducers = combineReducers({\n  inventory: commitInventoryFetcherReducer,\n});\n\nexport { default } from './InventoryLoader.topmost';\n","export const types = {\n  SEARCH: 'SEARCH',\n  COMMIT_SEARCH: 'COMMIT_SEARCH',\n  CLEAR: 'CLEAR',\n  COMMIT_CLEAR: 'COMMIT_CLEAR'\n}\n\nexport const searchReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.SEARCH:\n      return action.payload.needle;\n    default:\n      return state;\n  };\n};\n\nexport const commitSearchReducer = (state = {}, action) => {\n  switch (action.type) {\n    case types.COMMIT_SEARCH:\n      return {\n        ...state,\n        findings: action.payload,\n        filtered: true\n      }\n    default:\n      return state;\n  }\n}\n\nexport const creators = {\n  searchAction: (needle, haystack) => {\n    return {\n      type: types.SEARCH,\n      payload: {\n        needle,\n        haystack\n      }\n    }\n  },\n  commitSearch: (findings) => {\n    return {\n      type: types.COMMIT_SEARCH,\n      payload: findings\n    }\n  }\n}\n","import { takeLatest, put, fork } from 'redux-saga/effects';\nimport { creators, types } from './OmniSearchBox.module';\nimport jsonata from 'jsonata';\n\nexport function * searchSaga() {\n  yield takeLatest(types.SEARCH, search);\n}\n\nfunction * search(action) {\n  const {haystack, needle} = action.payload;\n\n  let res;\n  try {\n    const expr = jsonata(needle);\n    res = expr.evaluate(haystack);\n  }\n  catch (err) {\n    console.log('Error: ', {err});\n  }\n\n  if (!res) {\n    res = {};\n  }\n\n  yield put(creators.commitSearch(res));\n}\n\nexport const sagas = {\n  search: function * () {\n    yield takeLatest(types.SEARCH, search);\n  }\n};\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport './OmniSearchBox.style.css';\nimport { creators } from './OmniSearchBox.module';\n\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\n\nconst OmniBoxSearch = ({ defaultNeedle, haystack, search, rows }) => {\n  if (!rows || isNaN(rows)) {\n    rows = 1;\n  }\n\n  const [needle, setNeedle] = useState(defaultNeedle? defaultNeedle : '');\n\n  if (needle && needle.length > 0) {\n    search(needle, haystack);\n  }\n\n  return (\n    <>\n      <div className='container'>\n        <div className='row omni-search-box'>\n          <div className='col-12'>\n            <Editor\n              value={needle}\n              onValueChange={setNeedle}\n              highlight={code => highlight(code, languages.js)}\n              padding={10}\n              style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n                wordWrap: \"normal\",\n                whiteSpace: \"nowrap\",\n                border: \"1px solid #ccc\",\n                height: `${38*rows}px`\n              }}\n            />\n            <style>\n              {`.token.cdata,.token.comment,.token.doctype,.token.prolog {\n                  color: #90a4ae\n                }\n\n                .token.punctuation {\n                  color: #9e9e9e\n                }\n\n                .namespace {\n                  opacity: .7\n                }\n                .token.boolean,.token.constant,.token.deleted,.token.number,\n                .token.property,.token.symbol,.token.tag {\n                  color: #e91e63\n                }\n\n                .token.attr-name,.token.builtin,.token.char,.token.inserted,\n                .token.selector,.token.string {\n                  color: #4caf50\n                }\n\n                .language-css .token.string,.style .token.string,.token.entity,\n                .token.operator,.token.url {\n                  color: #795548\n                }\n\n                .token.atrule,.token.attr-value,.token.keyword {\n                  color: #3f51b5\n                }\n\n                .token.function {\n                  color: #f44336\n                }\n\n                .token.important,.token.regex,.token.variable {\n                  color: #ff9800\n                }\n\n                .token.bold,.token.important {\n                  font-weight: 700\n                }\n\n                .token.italic {\n                  font-style: italic\n                }\n\n                .token.entity {\n                  cursor: help\n                }`}\n            </style>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    search: (needle, haystack) => {\n      return dispatch(creators.searchAction(needle, haystack))\n    }\n  };\n};\n\nconst styles = {\n  token: {\n    punctuation: {\n      color: '#9e9e9e'\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OmniBoxSearch);\n","import { combineReducers } from 'redux';\nimport { \n  searchReducer,\n  commitSearchReducer\n} from './OmniSearchBox.module';\n\nexport { sagas } from './OmniSearchBox.sagas';\n\nexport { types as actions } from './OmniSearchBox.module';\nexport { creators } from './OmniSearchBox.module';\n\nexport const reducers = combineReducers({\n  needle: searchReducer, \n  search: commitSearchReducer\n});\n\nexport { default } from './OmniSearchBox.topmost';\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport JSONTree from 'react-json-tree'\n\nimport InventoryLoader from './components/InventoryLoader';\nimport OmniSearchBox from './components/OmniSearchBox';\n\n/*\nSi hago busqueda de 0, escribo en el searchbox y ejecuto action de search (por defecto)\n  Al terminar el search, como location.query es undefined, hago push a history con el qs.\n\nSi accedo con url+querystring, si el location.kind es load, cargo el searchbox y hago ejecuto action de search.\n  Al terminar el search, como location.kind es load, no hago push de querystring\n*/\n\n// https://github.com/reduxjs/redux-devtools/tree/75322b15ee7ba03fddf10ac3399881e302848874/src/react/themes\nconst theme = {\n  scheme: 'google',\n  author: 'seth wright (http://sethawright.com)',\n  base00: '#1d1f21',\n  base01: '#282a2e',\n  base02: '#373b41',\n  base03: '#969896',\n  base04: '#b4b7b4',\n  base05: '#c5c8c6',\n  base06: '#e0e0e0',\n  base07: '#ffffff',\n  base08: '#CC342B',\n  base09: '#F96A38',\n  base0A: '#FBA922',\n  base0B: '#198844',\n  base0C: '#3971ED',\n  base0D: '#3971ED',\n  base0E: '#A36AC7',\n  base0F: '#3971ED'\n};\n\nconst styles = {\n  fontFamily: 'sans-serif',\n  textAlign: 'center',\n};\n\nconst App = ({inventory, qs, findings}) => (\n  <>\n    <div className='container'>\n      <div className='row'>\n        <div className='col-12'>\n          <OmniSearchBox haystack={inventory} defaultNeedle={qs} rows={4}/>\n        </div>\n      </div>\n      <div className='row'>\n        <div className='col-12'>\n        <JSONTree \n          data={findings || inventory} \n          theme={theme} \n          hideRoot={true} \n          shouldExpandNode={(keyName, data, level) => (true)}/>\n        </div>\n      </div>\n    </div>\n\n    <InventoryLoader url='./inventory.json'/>\n  </>\n);\n\nconst mapStateToProps = (state) => {\n  return {\n    inventory: state.articles.inventory,\n    findings: state.omniSearchBox.search.findings,\n    qs: state.location.query && state.location.query.q\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { connectRoutes, NOT_FOUND } from 'redux-first-router';\nimport queryString from 'query-string';\n\nexport const routesMap = {\n  \"QS_SEARCH\": \"/\",\n  \"QS_SEARCH\": \"/dm-searcher\",\n  \"TODO\": \"/todo\"\n};\n\nexport const { \n  reducer: routeReducer, \n  middleware: routeMiddleware, \n  enhancer, \n  initialDispatch \n} = connectRoutes(routesMap, {\n  initialDispatch: false,\n  querySerializer: queryString\n});\n\nexport const pageReducer = (state = {}, action = {}) => {\n  switch (action.type) {\n    case 'QS_SEARCH':{\n      return state;\n    }\n    case NOT_FOUND:\n      return null;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport {\n  reducers as inventoryFetcher\n} from './components/InventoryLoader';\n\nimport {\n  reducers as omniSearchReducer\n} from './components/OmniSearchBox';\n\nimport {\n  routeReducer,\n  pageReducer\n} from './components/Router/router.module';\n\nexport default combineReducers({\n  articles: inventoryFetcher,\n  omniSearchBox: omniSearchReducer,\n  pages: pageReducer,\n  location: routeReducer\n});\n","import { actions } from '../OmniSearchBox';\nimport { takeLatest } from 'redux-saga/effects';\nimport { history } from 'redux-first-router'\n\nexport function * updateRouterSaga(){\n  yield takeLatest(actions.SEARCH, updateRouter);\n}\n\nfunction updateRouter(action) {\n  history().push(`/dm-searcher?q=${encodeURIComponent(action.payload.needle)}`);\n}\n","import { routesMap } from './router.module';\n\nexport { routeReducer, routeMiddleware, enhancer, pageReducer, initialDispatch } from './router.module';\n\nexport { updateRouterSaga } from './router.sagas';\n\nexport const actions = Object.keys(routesMap);\n","import { fork } from 'redux-saga/effects';\n\nimport { sagas as InventoryLoaderSagas } from './components/InventoryLoader';\nimport { sagas as OmniSeachBoxSagas } from './components/OmniSearchBox';\nimport { updateRouterSaga } from './components/Router';\n\n// https://stackoverflow.com/questions/39438005/what-is-the-idiomatic-way-of-starting-rootsaga/47623129\nexport default function * root () {\n  yield fork(InventoryLoaderSagas.fetch);\n  yield fork(OmniSeachBoxSagas.search);\n  yield fork(updateRouterSaga);\n};\n","import { applyMiddleware, createStore, combineReducers, compose } from \"redux\";\nimport { connectRoutes } from \"redux-first-router\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport rootReducer from \"./rootReducer\";\nimport AppActions from \"./actions\";\nimport rootSaga from './rootSaga';\nimport {\n  routeMiddleware, \n  enhancer, \n  initialDispatch } from './components/Router/router.module'\n\nexport default () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [];\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n  middlewares.push(routeMiddleware);\n  middlewares.push(sagaMiddleware);\n\n  const store = createStore(\n    rootReducer,\n    compose(\n      enhancer,\n      composeEnhancers(applyMiddleware(...middlewares)),\n    ));\n\n  sagaMiddleware.run(rootSaga);\n  initialDispatch();\n\n  return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport createStore from './create-store';\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n"],"sourceRoot":""}
{
  "title": "Formal Methods and Unified Modeling Language (UML)",
  "date": "2017-11-20",
  "layout": "education",
  "card": {
    "color": "#AD4647",
    "columnid": "done_3",
    "content": "Formal Methods and Unified Modeling Language (UML)",
    "datebox": "Nov 2015",
    "extlink": "https://www.fing.edu.uy/evento/alexander-knapp-towards-institutional-framework-heterogeneous-formal-development-uml",
    "laneid": "Education",
    "leftbox": "by Alexander Knapp",
    "leftmsg": "",
    "linkto": "/formal-methods-and-unified-modeling-language-uml",
    "position": "16",
    "subtaskdetails": [],
    "subtasks": "0",
    "subtaskscomplete": "0",
    "tags": null,
    "title": "INCO - FING UY",
    "type":"Education"
  },
  "resume": {
    "tags": "academy"
  }
}

---

[summary:string]
Course with the goal of explore UML capabilities and possible format semantics, analyze existing model-checking methods of verification and and introduce an algebraic theory of institutions for describing logical theories and institution (co-)morphisms for expressing relationships.

[duration:string]
Nov 25-27, 2015

[dictated_by:string]
Alexander Knapp

[place_url:string]
https://www.fing.edu.uy/evento/alexander-knapp-towards-institutional-framework-heterogeneous-formal-development-uml

[place:string]
INCO - FING UY

[content:md]
The Unified Modeling Language (UML) provides a wealth of sub-languages for specifying and documenting software systems, but only offers a rather weak linkage between these sub-languages through a common abstract syntax and an informal semantical description.  In order to open up the perspective of integrating the UML also in the development of safety-critical systems, we propose a heterogeneous modelling approach that represents the semantics of the several sub-languages in their own, appropriate semantic domain and provides flexible links between the different formalisms.  The approach is based on the algebraic theory of institutions for describing logical theories and institution (co-)morphisms for expressing relationships. We illustrate the approach by some examples for UML class diagrams, OCL, interactions, and state machines.

[lessons:md]
*   **Part I: UML**
    Different elements of the family of UML languages are discussed: class diagrams, state machines and interactions, as well as the Object Constraint Language (OCL). using the translation tool Hugo/RT models for verification of design properties based on UML study using SPIN and UPPAAL model checkers.
*   **Part II: Model checking**
    Two basic approaches are presented: symbolic model checking based on Binary Decision Diagrams (BDDs) for Computation Tree Logic (CTL), and cheking model based on Linear Temporal Logic automata (LTL) as is done in SPIN. It also presents temporal model checking using timed automata as is done in UPPAAL.
*   **Part III: UML as a heterogeneous language**
    It provides a brief introduction to the theory of institutions for the representation of the semantics of UML models and institutions are discussed for various UML diagrams: class diagrams, state machines and OCL.

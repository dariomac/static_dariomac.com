{
  "title": "Behind the scenes of Ethereum Pet Shop tutorial",
  "date": "2020-03-30",
  "layout": "document",
  "has_code": false,
  "card": {
    "color": "#00A651",
    "columnid": "done_3",
    "content": "Dive into some tools/topics beyond the coverage of Ethereum Pet Shop -- Your First Dapp tutorial",
    "datebox": "2020-03-30",
    "extlink": null,
    "laneid": "Essay",
    "leftbox": "",
    "leftmsg": "",
    "linkto": "/behind-the-scenes-of-ethereum-pet-shop-tutorial",
    "position": "20200330",
    "subtaskdetails": [],
    "subtasks": "0",
    "subtaskscomplete": "0",
    "tags": null,
    "title": "Behind the scenes of Ethereum Pet Shop tutorial",
    "type": "0"
  },
  "jsonld": {},
  "canonical": "https://www.vairix.com/tech-blog/behind-the-scenes-of-ethereum-pet-shop-tutorial",
  "resume": {
    "tags": "iov-researcher,iov-tech-arch"
  }
}

---

[summary:string]
Deep dive into some tools/topics beyond the coverage of Ethereum Pet Shop -- Your First Dapp tutorial. I explain things from a programmer point of view without worrying about underlying technology and concepts like mining hashing, elliptic-curve cryptography, peer-to-peer networks, etcetera. They are not necessary to use blockchain and you will have to accept them as given by the platform.

[pub_date:string]
2020-03-30

[short_description:string]
Deep dive into some tools/topics beyond the coverage of Ethereum Pet Shop -- Your First Dapp tutorial. I explain things from a programmer point of view without worrying about underlying technology and concepts like mining hashing, elliptic-curve cryptography, peer-to-peer networks, etcetera. They are not necessary to use blockchain and you will have to accept them as given by the platform.

[body:md]
If you are wondering how you can get started with blockchain and you have made the decision to embrace Ethereum, then you can start with [Ethereum Pet Shop -- Your First Dapp](https://www.trufflesuite.com/tutorials/pet-shop) tutorial. It’s a very comprehensive and well-written tutorial that covers everything you need to start playing around with Ethereum. Instead of repeating the concepts, we will work on that same example and dive into some tools/topics beyond the coverage of the tutorial. We will be explaining things from a programmer point of view without worrying about underlying technology and concepts like mining [hashing](https://en.wikipedia.org/wiki/Cryptographic_hash_function), [elliptic-curve cryptography](https://en.wikipedia.org/wiki/Elliptic_curve_cryptography), [peer-to-peer networks](https://en.wikipedia.org/wiki/Peer-to-peer), etcetera. They are not necessary to use blockchain and you will have to accept them as given by the platform.

First of all, you need to install Truffle. But what is Truffle? It is a “development environment, testing framework and asset pipeline for Ethereum, aiming to make life as an Ethereum developer easier.” Basically it lets you compile & migrate smart contracts, do automatic testing with Mocha and Chai, rebuilding of assets during development, and much more. It also lets you create boilerplates called Truffle Boxes containing modules, Solidity contracts & libraries, frontend views and more. You can see and “unbox” every public box from [here](https://www.trufflesuite.com/boxes).  

![Truffle Boxes](assets/pet-shop-1.jpg#center)  

Then the tutorial asks us to create our first smart contract. A contract is a collection of code (its function) and data (its state) written in Solidity, an object-oriented programming language used in various blockchain platforms besides Ethereum.

The first contract is called Adoption. It starts with the line `address[16] public adopters;` which declares a state variable called `adopters` of type `address[n]`, an array of Ethereum addresses. You can think of it as a single slot in a database that you can query and alter by calling functions (`adopt` and `getAdopters` in the tutorial example). Each address is a 20 byte (160 bit) value used to identify an account that can also be used to send and receive Ether between accounts.

So, you can see a blockchain as a globally shared transactional database, where everyone can read entries just by being in the network. If you want to change something you can create a transaction and, if it’s accepted by everyone, it will be completely applied; otherwise, it will not be done at all.  
  
![Blockchain transaction](assets/pet-shop-2.jpg#center)  

The diagram above shows what happens when an account (identified by its address) wants to adopt a pet using it’s ID. The first transaction is valid (accepted) so Block14 shows its result. You can always see the previous block to ask for its state and see the difference. Then, if for any reason, you want to adopt a dog that does not exist, the `require` of the `adopt` function will throw an exception (unless you pass a second parameter to the `require` to add a custom message). This will force a rollback (due to the nature of the transaction) so Block15 will never be created and the Gas used will be returned (well, maybe not all of it - we’ll explain more about this later).

Now, what happens if two transactions contradict each other in terms of block creation? Since blocks form a linear sequence (blockchain), the transaction that ends in first place will become part of the block. That first one will be selected for you, in a globally accepted order (during the mining) to solve the problem of what is “first” in terms of peer-to-peer network. So, nobody can assure you that your transaction will be included in the next block or any specific block in the future. It's up to the miners to determine in which block a transaction will be included.

Back to the pet shop example, we can see that the adopt function uses the `msg.sender`. There are special variables and functions like `msg`, `tx` and `block` that always exist in the global namespace and provide information about the blockchain. [Here](https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#block-and-transaction-properties) you can find a list of them. But, what if I want (for any reason) to permanently store the address of the person creating the contract? In that case you can use a [constructor](https://solidity.readthedocs.io/en/v0.5.11/contracts.html#constructor), that is a special function that runs during the contract creation and cannot be called afterwards. This is how the pet shop tutorial contract looks if you refactor it to use a `constructor`.  
  
<script src="https://gist.github.com/dariomac/bb86df06b0036c41f25dc6715a299c4d.js"></script>
  
## Estimating Gas in Ethereum

Something that bothered me from the very beginning was the Gas consumption. Remember that Gas is a unit that measures the amount of computational effort that will take to execute a given operation. Each created contract and every transaction executed will consume a certain amount of gas. So the first question (at least for me) is, how do I know how much Gas is needed to create a contract or to execute a transaction? The answer wasn’t straightforward, at least at the beginning.

If you did the pet shop tutorial, you saw that [web3 Javascript library](https://github.com/ethereum/web3.js/) is used to interact with the Ethereum blockchain, retrieving users, sending transactions, interacting with smart contracts and more. Digging in the web3 documentation I found a function called `estimateGas` but it's in two places: `web3.eth` and `web3.eth.Contract`. The [first option](https://web3js.readthedocs.io/en/v1.2.6/web3-eth.html#estimategas) receives a transaction object and a callback function, where the transaction object has all the necessary information to do the call simulation and return the estimated Gas. The [second](https://web3js.readthedocs.io/en/v1.2.6/web3-eth-contract.html#methods-mymethod-estimategas) (which I found clearer, at least for my level of knowledge) goes against the function of the contract you want to measure. For example, if you want to know how much Gas is consumed by the `adopt` function call with specific parameters you can do:  
  
<script src="https://gist.github.com/dariomac/afe2984260d5e845bda41b3a1c9bd58b.js"></script>
  
`adoptionInstance` is an instance of the deployed contract where you can call the adopt function as stated in the tutorial. However, if instead of calling the `adoptionInstance.adopt(petId, {from: account});` you call the `estimateGas` with the same params, you will receive the estimated Gas consumption after the transaction simulation.

## Gas cost in Ether

Remember that Ether is the currency inside Ethereum. So, what is the cost, in terms of Ether, of the previous Gas consumption calculation? To know it, we must know the Gas price. The Gas price is a value representing how much Ether a user is willing to pay per Gas. On every transaction you can set the max amount of Gas you are willing to consume and the price you are willing to pay for each unit of Gas. I say “can” because those parameters are optional. If you don’t set them, the network will provide some value determined by the last few blocks' median gas price. This price can be obtained asking the network with `web3.eth.getGasPrice` and it would be returned in Wei (the smallest denomination of Ether, 1 Ether = 1018 wei). Here is the complete example asking for confirmation to spend x amount of Ether in each adoption transaction:  

<script src="https://gist.github.com/dariomac/cf748e06bd591cdd0ed4d8a4cd29fed6.js"></script>

There are too many topics to be covered in just one article, such as [Storage, Memory and the Stack](https://solidity.readthedocs.io/en/v0.5.11/introduction-to-smart-contracts.html#storage-memory-and-the-stack), Events triggered from contracts and heard from client side via web3, [Message Calls](https://solidity.readthedocs.io/en/v0.5.11/introduction-to-smart-contracts.html#message-calls) to call contract from other contracts, etc. I will try to share more about them next time!

[acknowledgments:md]
[This post](https://www.vairix.com/tech-blog/behind-the-scenes-of-ethereum-pet-shop-tutorial) was written for Vairix Software Development, so I want say thanks to them for let me share this with you in my homepage.

[further_reading:md]

[significant_revisions:md]
_Mar 30, 2020_: Original publication on vairix.com

_Jul 15, 2020_: Original publication on dariomac.com

[related_topics:json]
  [{
    "title": "Blockchain 101 An Introduction",
    "click_bait": "If you don't know the basics of Blockchain, you can start here!",
    "linkto": "/blockchain-101-an-introduction"
  }]

#!/usr/bin/env node

var fs = require('fs'),
    commonmark = require('commonmark'),
    moment = require('moment'),
    ssiParser = require('tiny-ssi'),
    //hairlip = require('hairlip'),
    path = require('path');

var args = process.argv.slice(2);
var layoutPathPrefix = path.resolve(args[2]); //expect it to have trailing slash

if(layoutPathPrefix.slice(-1) !== '/') layoutPathPrefix += '/';

function stripExtension(fileName) {
  return fileName.substr(0, fileName.lastIndexOf('.'));
}

function renderToHtml(inputFilePath, outputFilePath) {
  fs.readFile(inputFilePath, 'utf8', function(fileErr, fileContent) {
    var res = processMarkupContent(fileContent);
    if(res.frontmatter) {
      res.frontmatter.date = res.frontmatter.date ? moment(res.frontmatter.date).format('MMMM Do YYYY') : moment().format('MMMM Do YYYY');
      res.frontmatter.layout = res.frontmatter.layout || "layout"; //default to page layout
      var layoutHTML = fs.readFileSync(layoutPathPrefix+res.frontmatter.layout+".html", 'utf8');
      //first pull in all includes in html
      layoutHTML = ssiParser(layoutPathPrefix+"/dummy", layoutHTML); //needs file path not just dir, hence dummy

      //var parser   = new commonmark.Parser();
      //var renderer = new commonmark.HtmlRenderer();
      //res.frontmatter.contents = renderer.render(parser.parse(res.content));
      res.frontmatter.contents = res.content;

      //and then parse through for "mustache-y" syntax...
      var finalHTML = hairlip(res.frontmatter, String(layoutHTML));
      //finalHTML = finalHTML.replace(/\r?\n|\r/g, '');

      //Check if the path already exists and warn
      fs.stat(outputFilePath, function(err, stats){
        if(err){
          fs.writeFileSync(outputFilePath, finalHTML, 'utf8');
          console.log("converted: "+inputFilePath+"->"+outputFilePath);
        }
        else{
          console.log("WARNING: file "+outputFilePath+" already exists.");
        }
      });

    } else {
      console.warn(inputFilePath + " is missing the Frontmatter section!")
    }
  });
}

function convertFilesInPath(inputPath, outputPath) {
  //make sure paths are slash terminated
  inputPath = (inputPath.lastIndexOf('/') === inputPath.length -1) ? inputPath : inputPath + '/' ;
  outputPath = (outputPath.lastIndexOf('/') === outputPath.length -1) ? outputPath : outputPath + '/' ;

  fs.readdir(path.resolve(inputPath), function(pathErr, files) {
    files.forEach(function(file) {
      if(fs.lstatSync(inputPath + file).isDirectory()) {
        convertFilesInPath(inputPath + file, outputPath);
        return;
      } else if (file.substr(-2) != 'md') {
        return;
      }

      if(!fs.existsSync(outputPath)) {
        fs.mkdirSync(outputPath);
      }

      renderToHtml(inputPath+ file, outputPath + stripExtension(file) + '.html');
    });
  });
}

/**
  * returns an array, first object is the JSON frontmatter as an object, second is the
  * text with the front matter stripped out
  */
function processMarkupContent(data) {
  //strip out json front-matter
  var parts = data.split(/---/);
  var jsonFM, jsonContent;
  if (parts[0].length < 1) {
    throw new Error("missing frontmatter");
  }
  try {
    jsonFM = JSON.parse(parts[0]);

    contentArr = parts[1].trim().split(/(?=\[[a-z:_]+\]+)/);
    for (var i=0; i<contentArr.length; i++){
      var [fullKey, iContent] = contentArr[i].split(']');

      var [key, type] = fullKey.slice(1).split(':');
      if (type){
        var parser   = new commonmark.Parser();
        var renderer = new commonmark.HtmlRenderer();
        jsonFM[key] = renderer.render(parser.parse(iContent));
      }
      else{
        jsonFM[key] = iContent;
      }
    }
  } catch(e) {
    console.error("[frontmatter] err parsing json:"+parts[0], e);
  }
  parts.shift();

  return {
    frontmatter : jsonFM,
    content: parts.join('---') // creo que es lo mismo que hacer toString()
  };
}

// Hairlip is
// a very tiny version of mustache that only does variable replacement
// and nothing else.
// src: https://gist.github.com/Breton/6027591
// Hairlip is
// a very tiny version of mustache that only does variable replacement
// and nothing else.
function hairlip(o, s) {
    return s.replace(/{{([^{}]*)}}/g,
        function (a, b) {
            return {string:true,number:true}[typeof o[b]] ? o[b] : "";
        }
    );
};

convertFilesInPath(args[0], args[1]);

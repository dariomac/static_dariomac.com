#!/usr/bin/env node

var fs = require('fs'),
    commonmark = require('commonmark'),
    moment = require('moment'),
    ssiParser = require('tiny-ssi'),
    hb = require('handlebars'),
    path = require('path'),
    fsx = require('fs-extra'),
    cmdArgs = require('command-line-args');

const argsDef = [
  { name: 'clear-all', alias: 'c', type: Boolean},
  { name: 'verbose', alias: 'v', type: Boolean }];

const argOptions = cmdArgs(argsDef);

var args = process.argv.slice(2);

//make sure paths are slash terminated
var inputPath = (args[0].lastIndexOf('/') === args[0].length -1) ? args[0] : args[0] + '/';
var outputPath = (args[1].lastIndexOf('/') === args[1].length -1) ? args[1] : args[1] + '/';
var layoutPathPrefix = (args[2].lastIndexOf('/') === args[2].length -1) ? args[2] : args[2] + '/';
var assetsPath = outputPath + 'assets/';

var compiledLayouts = {};
var collectionPages = [];
var collectionJson = [];

hb.registerHelper('json', function(obj) {
  return JSON.stringify(obj);
});

hb.registerHelper('ifEq', function(v1, v2, options) {
  if(v1 === v2) {
    return options.fn(this);
  }
  return options.inverse(this);
});

hb.registerHelper('ifNotEq', function(v1, v2, options) {
  return hb.helpers.ifEq(v1, v2, {
    'fn': options.inverse,
    'inverse': options.fn
  });
});

hb.registerHelper('ifIsOrWasInProgress', function(columnId, options) {
  if(columnId === 'progress_2' || columnId === 'done_3' || columnId === 'archive_6') {
    return options.fn(this);
  }
  return options.inverse(this);
});

hb.registerHelper('ifOrWasDone', function(columnId, options) {
  if(columnId === 'done_3' || columnId === 'archive_6') {
    return options.fn(this);
  }
  return options.inverse(this);
});

hb.registerHelper('ifDone', function(columnId, options) {
  if(columnId === 'done_3') {
    return options.fn(this);
  }
  return options.inverse(this);
});

if(layoutPathPrefix.slice(-1) !== '/') layoutPathPrefix += '/';

function stripExtension(fileName) {
  return fileName.substr(0, fileName.lastIndexOf('.'));
}

function renderToHtml(inputFilePath, outputFilePath) {
  var fileContent = fs.readFileSync(inputFilePath, 'utf8');
  var res = processMarkupContent(fileContent);
  if(res.frontmatter && res.frontmatter.date.length > 0) {
    if (res.frontmatter.mode == 'collection'){
      if (res.frontmatter.layout === 'sitemap.xml') {
        outputFilePath = outputFilePath.replace('sitemap.html', 'sitemap.xml');
      }
      collectionPages.push({
        inputFilePath: inputFilePath,
        outputFilePath: outputFilePath,
        content: res
      });
    }
    else{
      processContentAndSaveFile(inputFilePath, outputFilePath, res);
      collectionJson.push(res.frontmatter);
    }
  } else {
    console.warn(inputFilePath + " is missing the Frontmatter section!")
  }
}

function processContentAndSaveFile(inputFilePath, outputFilePath, sourceContent){
  sourceContent.frontmatter.fdate = sourceContent.frontmatter.date ? moment(sourceContent.frontmatter.date).format('MMMM Do YYYY') : moment().format('MMMM Do YYYY');

  sourceContent.frontmatter.layout = sourceContent.frontmatter.layout || "layout"; //default to page layout

  var layoutHTML = compiledLayouts[sourceContent.frontmatter.layout];
  if (!layoutHTML){
    let layoutFilename = sourceContent.frontmatter.layout;
    if (sourceContent.frontmatter.layout.indexOf('.') === -1) {
      layoutFilename += '.html';
    }
    layoutHTML = fs.readFileSync(`${layoutPathPrefix}${layoutFilename}`, 'utf8');
    //first pull in all includes in html
    layoutHTML = ssiParser(layoutPathPrefix+"/dummy", layoutHTML); //needs file path not just dir, hence dummy
    layoutHTML = hb.compile(layoutHTML);

    compiledLayouts[sourceContent.frontmatter.layout] = layoutHTML;
  }

  sourceContent.frontmatter.contents = sourceContent.content;

  //and then parse through for "mustache-y" syntax...using handlebars
  var finalHTML = layoutHTML(sourceContent.frontmatter);
  finalHTML = hb.compile(finalHTML)(sourceContent.frontmatter);
  //finalHTML = finalHTML.replace(/\r?\n|\r/g, '');

  //Check if the path already exists and warn
  fs.stat(outputFilePath, function(err, stats){
    if(err){
      fs.writeFileSync(outputFilePath, finalHTML, 'utf8');
      console.log("converted: " + inputFilePath + '->' + outputFilePath);
    }
    else{
      console.warn("WARNING: file " + outputFilePath + " already exists.");
    }
  });
}

function convertFilesInPath(inputPath, outputPath) {
  if(!fs.existsSync(outputPath)) {
    fs.mkdirSync(outputPath);
  }

  files = fs.readdirSync(path.resolve(inputPath));

  files.forEach(function(file) {
    if(fs.lstatSync(inputPath + file).isDirectory()) {

      if (file == 'assets'){
        fsx.copySync(inputPath + file, assetsPath, {'overwrite': true, 'errorOnExist': false});
      }
      else{
        convertFilesInPath(inputPath + file + '/', outputPath);
      }
      return;

    } else if (file.substr(-2) != 'md') {
      return;
    }

    renderToHtml(inputPath+ file, outputPath + stripExtension(file) + '.html');
  });
}

/**
  * returns an array, first object is the JSON frontmatter as an object, second is the
  * text with the front matter stripped out
  */
function processMarkupContent(data) {
  //strip out json front-matter
  var parts = data.split(/^---/m);
  var jsonFM, dmdContent;
  if (parts[0].length < 1) {
    throw new Error("missing frontmatter");
  }
  try {
    jsonFM = JSON.parse(parts[0]);
    dmdContent = parts[1].trim()+'\n'; //Trim to remove initial \n's and later add \n to make EOF explicit

    contentArr = dmdContent.split(/(?=^\[[a-z:_]+\][ ]*\n)/gm);
    for (var i=0; i<contentArr.length; i++){

      var endFullKeyIdx = contentArr[i].indexOf("]");
      var fullKey = contentArr[i].slice(1, endFullKeyIdx);
      var iContent = contentArr[i].substr(endFullKeyIdx+1);

      iContent = iContent.trim();

      var [key, type] = fullKey.split(':');

      var keyVal = null;
      switch(type){
        case 'md':
          var parser   = new commonmark.Parser();
          var renderer = new commonmark.HtmlRenderer();
          keyVal = renderer.render(parser.parse(iContent));
          break;

        case 'json':
          var jsonEntry = JSON.parse(iContent);

          if (jsonEntry.constructor === Object){
            var htmlTemplate = null;
            if (key === 'related_images'){
              var htmlTemp = fs.readFileSync("common/_entry-gallery.html", 'utf8');
              htmlTemplate = hb.compile(htmlTemp);
            }
            else{
              throw(new Error('Key "' + key + '" not handled!'));
            }
            for (var property in jsonEntry) {
              if (jsonEntry.hasOwnProperty(property)) {
                jsonFM[property] = htmlTemplate({'related_images': jsonEntry[property]});
              }
            }
          }
          else{
            keyVal = jsonEntry;
          }
          break;

        case 'string':

        default:
          keyVal = iContent;
      }
      if (keyVal)
        jsonFM[key] = keyVal;
    }
    /*if(jsonFM['fields_with_mustaches']){
      jsonFM['fields_with_mustaches'].forEach(function(v, i){
        jsonFM[v] = hb.compile(jsonFM[v])(jsonFM);
      });
    }*/
  } catch(e) {
    console.error("[frontmatter] err parsing file:" + parts[0], e);
  }
  parts.shift();

  return {
    frontmatter : jsonFM,
    content: parts.join('---') // creo que es lo mismo que hacer toString()
  };
}

function copyWebsiteAssets(){
  if(!fs.existsSync(assetsPath)) {
    fs.mkdirSync(assetsPath);
  }
  try {
    fsx.copySync('./assets/', assetsPath, {'overwrite': true, 'errorOnExist': false});
  }
  catch(e){
    console.warn("ERROR: " + e + '.');
  }
}

function convertCollectionFiles(){
  for(var i=0; i<collectionPages.length; i++){
    var cPage = collectionPages[i];
    cPage.content.frontmatter.jsons = collectionJson;
    processContentAndSaveFile(cPage.inputFilePath, cPage.outputFilePath, cPage.content);
  }
}

if (argOptions['clear-all']){
  fsx.removeSync(outputPath);
  fs.mkdirSync(outputPath);
}

copyWebsiteAssets();
convertFilesInPath(inputPath, outputPath);
convertCollectionFiles();
